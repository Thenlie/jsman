// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sections getAllSections returns all sections from a given document 1`] = `
[
  {
    "level": 2,
    "name": "Syntax",
    "position": 1,
  },
  {
    "level": 3,
    "name": "Parameters",
    "position": 2,
  },
  {
    "level": 3,
    "name": "Return value",
    "position": 3,
  },
  {
    "level": 2,
    "name": "Description",
    "position": 4,
  },
  {
    "level": 2,
    "name": "Examples",
    "position": 5,
  },
  {
    "level": 3,
    "name": "Mapping an array of numbers to an array of square roots",
    "position": 6,
  },
  {
    "level": 3,
    "name": "Using map to reformat objects in an array",
    "position": 7,
  },
  {
    "level": 3,
    "name": "Using parseInt() with map()",
    "position": 8,
  },
  {
    "level": 3,
    "name": "Mapped array contains undefined",
    "position": 9,
  },
  {
    "level": 3,
    "name": "Side-effectful mapping",
    "position": 10,
  },
  {
    "level": 3,
    "name": "Using the third argument of callbackFn",
    "position": 11,
  },
  {
    "level": 3,
    "name": "Using map() on sparse arrays",
    "position": 12,
  },
  {
    "level": 3,
    "name": "Calling map() on non-array objects",
    "position": 13,
  },
  {
    "level": 2,
    "name": "Specifications",
    "position": 14,
  },
  {
    "level": 2,
    "name": "Browser compatibility",
    "position": 15,
  },
  {
    "level": 2,
    "name": "See also",
    "position": 16,
  },
]
`;

exports[`sections getSection passes 1`] = `
"## Description

The \`map()\` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided \`callbackFn\` function once for each element in an array and constructs a new array from the results. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.

\`callbackFn\` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).

The \`map()\` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the \`this\` value to have a \`length\` property and integer-keyed properties.

Since \`map\` builds a new array, calling it without using the returned array is an anti-pattern; use {{jsxref("Array/forEach", "forEach")}} or {{jsxref("Statements/for...of", "for...of")}} instead.
"
`;

exports[`sections getSection passes 2`] = `
"## Accessibility concerns

Use of the \`title\` attribute is highly problematic for:

- People using touch-only devices
- People navigating with keyboards
- People navigating with assistive technology such as screen readers or magnifiers
- People experiencing fine motor control impairment
- People with cognitive concerns

This is due to inconsistent browser support, compounded by the additional assistive technology parsing of the browser-rendered page. If a tooltip effect is desired, it is better to [use a more accessible technique](https://inclusive-components.design/tooltips-toggletips/) that can be accessed with the above browsing methods.

- [3.2.5.1. The title attribute | W3C HTML 5.2: 3. Semantics, structure, and APIs of HTML documents](https://html.spec.whatwg.org/multipage/dom.html#the-title-attribute)
- [Using the HTML title attribute â€“ updated | The Paciello Group](https://www.tpgi.com/using-the-html-title-attribute-updated/)
- [Tooltips & Toggletips - Inclusive Components](https://inclusive-components.design/tooltips-toggletips/)
- [The Trials and Tribulations of the Title Attribute - 24 Accessibility](https://www.24a11y.com/2017/the-trials-and-tribulations-of-the-title-attribute/)
"
`;
